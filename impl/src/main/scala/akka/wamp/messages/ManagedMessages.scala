package akka.wamp.messages

import akka.actor.ActorRef
import akka.http.scaladsl.Http
import akka.wamp._

/**
  * Common interface for all commands and signals the Wamp manager can deal with
  */
trait ManagedMessage

/**
  * Common interface for all commands the Wamp manager can execute
  *
  * - Connect
  * - Disconnect
  * - Bind
  * - Unbind
  * - ...
  */
trait Command extends ManagedMessage

/**
  * This connect command is sent by a client applications with the intent to connect to a router.
  *
  * It is sent to the Wamp [[ExtensionManager]], which is obtained via  [[WampExtension#manager]]. 
  * Either the manager replies with a [[CommandFailed]] signal or with a [[Connected]] signal 
  * bearing the reference to the newly spawned [[client.TransportHandler]] actor.
  *
  * @param url is the URL to connect to (e.g. "ws://somehost.com:9999/path/to/ws")
  * @param subprotocol is the WebSocket subprotocol to negotiate (e.g. "wamp.2.msgpack" or "wamp.2.json")
  */
final case class Connect(url: String, subprotocol: String) extends Command


/**
  * This handle command is sent by a [[router.TransportListener]] upon receiving 
  * a [[Http.IncomingConnection]] to ask a newly spawned [[router.ConnectionHandler]] to
  * handle it
  * 
  * @param conn is the incoming connection to be handled
  */
final case class HandleHttpConnection(conn: Http.IncomingConnection) extends Command

/**
  * This disconnect command is sent by client applications with the intent to connect from a router.
  *
  * It is sent to the [[client.TransportHandler]] actor whose reference was obtained upon receiving
  * the [[Connected]] signal.
  */
final case object Disconnect extends Command


/**
  * This bind command is sent by routing applications with the intent to bind the router to a given
  * named transport configuration 
  *
  * It is sent to the extension manager actor, which is obtained via [[WampExtension#manager]].
  * Either the manager replies either with a [[CommandFailed]] signal or with a [[Bound]] signal 
  * bearing the reference to the newly spawned [[akka.wamp.router.TransportListener]] actor. 
  *
  * @param router is the router to bind
  * @param transport is the name of the transport configuration to bind to              
  */
final case class Bind(router: ActorRef, transport: String = "default") extends Command


/**
  * This unbind command is sent by routing applications with the intent to unbound from a transport.
  *
  * It is sent to [[router.TransportListener]] actor whose reference was obtained upon receiving 
  * the [[Bound]] signal
  */
final case object Unbind


// ~~~~~~~~~~~~~~~~~~~~~~~~~~

/**
  * Common interface for all signals generated by this extension
  */
trait Signal extends ManagedMessage

/**
  * This failure signal is replied back whenever a command fails
  *
  * @param cmd is the original command which failed
  * @param ex is the exception thrown
  */
case class CommandFailed(cmd: Command, ex: Throwable) extends Signal

/**
  * This bound signal is replied back whenever a [[Bind]] command succeed.
  *
  * @param listener is the actor reference of the newly spawned [[router.TransportListener]] actor
  * @param url is the URL the listener is actually bound to
  */
final case class Bound(listener: ActorRef, url: String) extends Signal

// TODO final case object Unbound

/**
  * This connected signal is replied back whenever a [[Connect]] command succeed. 
  *
  * @param inletHandler is the actor reference of the newly spawned [[client.TransportHandler]]
  */
final case class Connected(inletHandler: ActorRef) extends Signal

/**
  * This disconnected signal announces handler disconnection
  */
sealed abstract class Disconnected extends Signal
final case object Disconnected extends Disconnected

