package akka.wamp


import akka.actor.{ActorRef, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider, Props}
import akka.io.IO


/**
  * WAMP Extension for Akka’s IO layer.
  *
  * For a full description of the design and philosophy behind this IO
  * implementation please refer to <a href="http://doc.akka.io/">the Akka online documentation</a>.
  *
  * In order to open an outbound connection send a [[Wamp.Connect]] message
  * to the [[WampExtension#manager]].
  *
  * In order to start listening for inbound connections send a [[Wamp.Bind]]
  * message to the [[WampExtension#manager]].
  */
object Wamp extends ExtensionId[WampExtension] with ExtensionIdProvider {
  
  /**
    * Returns the canonical ExtensionId for this Extension
    */
  override def lookup(): ExtensionId[_ <: Extension] = Wamp

  /**
    * Is used by Akka to instantiate the Extension identified by this ExtensionId,
    * internal use only.
    */
  override def createExtension(system: ExtendedActorSystem): WampExtension = new WampExtension(system)

  /**
    * Common interface for all commands and signals the Wamp manager can deal with
    */
  trait ManagedMessage

  /**
    * Common interface for all commands the Wamp manager can execute
    * 
    * - Connect
    * - Disconnect
    * - Bind
    * - Unbind
    * - ...
    */
  trait Command extends ManagedMessage

  /**
    * The Connect command is sent to the WAMP manager actor, which is obtained via
    * [[WampExtension#manager]]. Either the manager replies with a [[CommandFailed]]
    * signal or with a [[Connected]] signal bearing a reference to the newly spawned 
    * connection handler actor.
    *
    * @param url is the URL to connect to (e.g. "ws://somehost.com:9999/path/to/router")
    * @param subprotocol is the WebSocket subprotocol to negotiate (e.g. "wamp.2.msgpack" or "wamp.2.json")
    */
  final case class Connect(url: String, subprotocol: String) extends Command

  final case object Disconnect extends Command
  
  /**
    * The Bind command message is sent to the extension manager actor, which is obtained via
    * [[WampExtension#manager]], in order to bind a new transport listener for the given router.
    * 
    * The manager replies either with a [[CommandFailed]] or the actor handling the listen
    * socket replies with a [[Bound]] signal message. If the local port is set to 0 in
    * the Bind message, then the [[Bound]] message should be inspected to find
    * the actual port which was bound to.
    *
    * @param router is the actor which will receive all incoming connection requests in the form of [[Connected]] messages
    */
  final case class Bind(router: ActorRef) extends Command


  /**
    * In order to close down a listening socket, send this message to that socket’s
    * actor (that is the actor which previously had sent the [[Bound]] message). The
    * listener socket actor will reply with a [[Unbound]] message.
    */
  final case object Unbind


  // ~~~~~~~~~~~~~~~~~~~~~~~~~~
  
  /**
    * Common interface for all signals generated by the Wamp manager.
    */
  trait Signal extends ManagedMessage

  /**
    * Whenever a command cannot be completed, the manager actor will reply with
    * this message.
    * 
    * @param cmd is the original command which failed
    * @param ex is the exception thrown
    */
  case class CommandFailed(cmd: Command, ex: Throwable) extends Signal
  
  /**
    * The sender of a [[Bind]] command will — in case of success — receive confirmation
    * in this form. If the configuration indicated a 0 port number, then the contained
    * `url` can be used to find out which port was automatically assigned.
    * 
    * @param listener is the actor reference of the newly spawned listener
    * @param url is the URL the listener is actually bound to
    */
  final case class Bound(listener: ActorRef, url: String) extends Signal

  /**
    * Signalled by the client manager when connection is established
    */
  final case class Connected(conn: ActorRef) extends Signal


  /**
    * The disconnected signal to announce transport disconnection
    */
  final case object Disconnected extends Signal
  
}



class WampExtension(system: ExtendedActorSystem) extends IO.Extension {
  val manager = system.actorOf(ExtensionManager.props(), name = "IO-Wamp")
}
