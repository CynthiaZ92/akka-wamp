package akka.wamp.messages

import akka.actor.ActorRef
import akka.http.scaladsl.Http
import akka.wamp._

/**
  * Common interface for all commands and signals the Wamp manager can deal with
  */
trait ManagedMessage

/**
  * Common interface for all commands the Wamp manager can execute
  *
  * - Connect
  * - Disconnect
  * - Bind
  * - Unbind
  * - ...
  */
trait Command extends ManagedMessage

/**
  * This connect command is sent by a client applications with the intent to connect to a router.
  *
  * @param url is the URL to connect to (e.g. "ws://somehost.com:9999/path/to/ws")
  * @param format is the message format (e.g. "json") 
  */
final case class Connect(url: String, format: String) extends Command


/**
  * This handle command is sent by a connection listener upon receiving the incoming connection
  * signal to ask a newly spawned connection handler to handle it
  * 
  * @param conn is the incoming connection to be handled
  */
final case class HandleHttpConnection(conn: Http.IncomingConnection) extends Command

/**
  * This disconnect command is sent by client applications with the intent to connect from a router.
  */
final case object Disconnect extends Command


/**
  * This bind command is sent by routing applications with the intent to bind the router to a given
  * named transport configuration .
  *
  * @param router is the router to bind
  * @param transport is the name of the transport configuration to bind to              
  */
final case class Bind(router: ActorRef, transport: String = "default") extends Command


/**
  * This unbind command is sent by routing applications with the intent to unbound from a transport.
  */
final case object Unbind


// ~~~~~~~~~~~~~~~~~~~~~~~~~~

/**
  * Common interface for all signals generated by this extension
  */
trait Signal extends ManagedMessage

/**
  * This failure signal is replied back whenever a command fails
  *
  * @param cmd is the original command which failed
  * @param ex is the exception thrown
  */
case class CommandFailed(cmd: Command, ex: Throwable) extends Signal

/**
  * This bound signal is replied back whenever a [[Bind]] command succeed.
  *
  * @param listener is the actor reference of the newly spawned connection listener actor
  * @param port is the port number the listener is currently bound to
  */
final case class Bound(listener: ActorRef, port: Int) extends Signal

// TODO final case object Unbound

/**
  * It the connected signal replied back whenever a [[Connect]] command succeed.
  *
  * @param handler is the actor reference of the newly spawned connection handler actor
  */
final case class Connected(handler: ActorRef) extends Signal

/**
  * This disconnected signal announces handler disconnection
  */
sealed abstract class Disconnected extends Signal
final case object Disconnected extends Disconnected


/**
  * This closed signal announces session closed
  */
sealed abstract class Closed extends Signal
final case object Closed extends Closed

